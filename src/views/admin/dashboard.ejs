<!DOCTYPE html>
<html lang="tr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - Ark Stream</title>
    <link rel="icon" type="image/png" href="/static/assets/indir.png">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/datatables.net-bs5/1.13.6/dataTables.bootstrap5.min.css"
        rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.0/sweetalert2.min.css" rel="stylesheet">

    <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #3498db;
            --danger-color: #e74c3c;
            --success-color: #27ae60;
            --warning-color: #f39c12;
            --info-color: #17a2b8;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #090b11 0%, #1e1f44 100%);
            min-height: 100vh;
            color: #333;
        }

        .admin-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Modern Glassmorphism Header */
        .admin-header {
            background: rgba(255, 255, 255, 0.25);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.18);
            border-radius: 15px;
            padding: 25px 35px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .admin-logo {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .admin-logo i {
            font-size: 2.5rem;
            color: #fff;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .admin-logo h1 {
            font-size: 2rem;
            font-weight: 700;
            color: #fff;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .admin-nav {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .user-info {
            color: #fff;
            font-weight: 600;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
            margin-right: 15px;
        }

        .nav-btn {
            padding: 12px 24px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: rgba(255, 255, 255, 0.2);
            color: #fff;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .nav-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            color: #fff;
        }

        .nav-btn.btn-danger {
            background: rgba(231, 76, 60, 0.8);
        }

        .nav-btn.btn-danger:hover {
            background: rgba(192, 57, 43, 0.9);
        }

        /* Main Content */
        .admin-main {
            display: grid;
            grid-template-columns: 250px 1fr;
            gap: 30px;
            align-items: start;
        }

        /* Sidebar */
        .admin-sidebar {
            background: rgba(255, 255, 255, 0.25);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.18);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            position: sticky;
            top: 20px;
        }

        .sidebar-menu {
            list-style: none;
        }

        .sidebar-menu li {
            margin-bottom: 10px;
        }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 15px 20px;
            border-radius: 10px;
            text-decoration: none;
            color: #fff;
            font-weight: 500;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .sidebar-menu a:hover,
        .sidebar-menu a.active {
            background: rgba(255, 255, 255, 0.2);
            transform: translateX(5px);
        }

        /* Content Area */
        .admin-content {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.18);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            min-height: 600px;
        }

        .content-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e9ecef;
        }

        .content-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            gap: 15px;
        }

        /* Modern Buttons */
        .btn-modern {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
            font-size: 14px;
        }

        .btn-primary-modern {
            background: linear-gradient(45deg, #090b11, #1e1f44);
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-primary-modern:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);
            color: white;
        }

        .btn-success-modern {
            background: linear-gradient(45deg, #56ab2f, #a8e6cf);
            color: white;
            box-shadow: 0 4px 15px rgba(86, 171, 47, 0.4);
        }

        .btn-danger-modern {
            background: linear-gradient(45deg, #ff6b6b, #ee5a6f);
            color: white;
            box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
        }

        .btn-warning-modern {
            background: linear-gradient(45deg, #feca57, #ff9ff3);
            color: white;
            box-shadow: 0 4px 15px rgba(254, 202, 87, 0.4);
        }

        /* DataTable Customization */
        .table {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .table thead {
            background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
            color: white;
        }

        .table thead th {
            border: none;
            padding: 15px 12px;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 12px;
            letter-spacing: 1px;
        }

        .table tbody tr {
            transition: all 0.3s ease;
        }

        .table tbody tr:hover {
            background-color: #f8f9fa;
            transform: scale(1.01);
        }

        .table tbody td {
            padding: 15px 12px;
            vertical-align: middle;
            border-top: 1px solid #e9ecef;
        }

        /* Status Badges */
        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-active {
            background: linear-gradient(45deg, #27ae60, #2ecc71);
            color: white;
        }

        .status-inactive {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            color: white;
        }

        .status-streaming {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            color: white;
        }

        .status-stopped {
            background: linear-gradient(45deg, #95a5a6, #7f8c8d);
            color: white;
        }

        .status-starting {
            background: linear-gradient(45deg, #f39c12, #e67e22);
            color: white;
        }

        .status-error {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            color: white;
        }

        .role-badge {
            padding: 4px 10px;
            border-radius: 15px;
            font-size: 10px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .role-admin {
            background: linear-gradient(45deg, #242663, #1e1f44);
            color: white;
        }

        .role-user {
            background: linear-gradient(45deg, #3498db, #2980b9);
            color: white;
        }

        .role-viewer {
            background: linear-gradient(45deg, #95a5a6, #7f8c8d);
            color: white;
        }

        /* Loading Animation */
        .loading {
            display: none;
            text-align: center;
            padding: 50px;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--secondary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Responsive */
        @media (max-width: 992px) {
            .admin-main {
                grid-template-columns: 1fr;
            }

            .admin-sidebar {
                position: static;
            }
        }

        @media (max-width: 768px) {
            .admin-container {
                padding: 15px;
            }

            .admin-header {
                flex-direction: column;
                gap: 15px;
                text-align: center;
            }

            .content-header {
                flex-direction: column;
                gap: 15px;
            }
        }

        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.5);
        }
    </style>
</head>

<body>
    <div class="admin-container">
        <!-- Header -->
        <header class="admin-header">
            <div class="admin-logo">
                <i class="fas fa-shield-alt"></i>
                <h1>Ark Stream Admin</h1>
            </div>
            <div class="admin-nav">
                <span class="user-info">
                    <i class="fas fa-user-circle"></i>
                    Hoş geldin, <%= user ? user.username : 'Admin' %>!
                </span>
                <a href="/admin/logout" class="nav-btn btn-danger">
                    <i class="fas fa-sign-out-alt"></i>
                    Çıkış
                </a>
            </div>
        </header>

        <!-- Main Content -->
        <main class="admin-main">
            <!-- Sidebar -->
            <aside class="admin-sidebar">
                <ul class="sidebar-menu">
                    <li>
                        <a href="#" data-section="users" class="menu-item active">
                            <i class="fas fa-users"></i>
                            Kullanıcılar
                        </a>
                    </li>
                    <li>
                        <a href="#" data-section="cameras" class="menu-item">
                            <i class="fas fa-video"></i>
                            Kameralar
                        </a>
                    </li>
                    <li>
                        <a href="#" data-section="streams" class="menu-item">
                            <i class="fas fa-broadcast-tower"></i>
                            Yayınlar
                        </a>
                    </li>
                    <li>
                        <a href="#" data-section="settings" class="menu-item">
                            <i class="fas fa-cogs"></i>
                            Ayarlar
                        </a>
                    </li>
                    <li>
                        <a href="#" data-section="logs" class="menu-item">
                            <i class="fas fa-clipboard-list"></i>
                            Loglar
                        </a>
                    </li>
                </ul>
            </aside>

            <!-- Content Area -->
            <section class="admin-content">
                <!-- Loading -->
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Yükleniyor...</p>
                </div>

                <!-- Users Section -->
                <div id="users-section" class="content-section">
                    <div class="content-header">
                        <h2 class="content-title">
                            <i class="fas fa-users"></i>
                            Kullanıcı Yönetimi
                        </h2>
                        <button class="btn-modern btn-primary-modern" id="addUserBtn">
                            <i class="fas fa-plus"></i>
                            Yeni Kullanıcı
                        </button>
                    </div>

                    <div class="table-responsive">
                        <table id="usersTable" class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Kullanıcı Adı</th>
                                    <th>Email</th>
                                    <th>Rol</th>
                                    <th>Durum</th>
                                    <th>Son Giriş</th>
                                    <th>Oluşturulma</th>
                                    <th>İşlemler</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- DataTable will populate this -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Cameras Section -->
                <div id="cameras-section" class="content-section" style="display: none;">
                    <div class="content-header">
                        <h2 class="content-title">
                            <i class="fas fa-video"></i>
                            Kamera Yönetimi
                        </h2>
                        <button class="btn-modern btn-primary-modern" id="addCameraBtn">
                            <i class="fas fa-plus"></i>
                            Yeni Kamera
                        </button>
                    </div>

                    <div class="table-responsive">
                        <table id="camerasTable" class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Kamera Adı</th>
                                    <th>Marka</th>
                                    <th>Model</th>
                                    <th>Durum</th>
                                    <th>Yayın Sayısı</th>
                                    <th>Oluşturulma</th>
                                    <th>İşlemler</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- DataTable will populate this -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Streams Section -->
                <div id="streams-section" class="content-section" style="display: none;">
                    <div class="content-header">
                        <h2 class="content-title">
                            <i class="fas fa-broadcast-tower"></i>
                            Yayın Yönetimi
                        </h2>
                        <button class="btn-modern btn-primary-modern" id="addStreamBtn">
                            <i class="fas fa-plus"></i>
                            Yeni Yayın
                        </button>
                    </div>

                    <div class="table-responsive">
                        <table id="streamsTable" class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Yayın Adı</th>
                                    <th>Kamera</th>
                                    <th>IP Adresi</th>
                                    <th>Durum</th>
                                    <th>Çözünürlük</th>
                                    <th>FPS</th>
                                    <th>Son Başlatma</th>
                                    <th>İşlemler</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- DataTable will populate this -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <div id="settings-section" class="content-section" style="display: none;">
                    <div class="content-header">
                        <h2 class="content-title">
                            <i class="fas fa-cogs"></i>
                            Sistem Ayarları
                        </h2>
                    </div>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        Ayarlar modülü yakında eklenecek...
                    </div>
                </div>

                <div id="logs-section" class="content-section" style="display: none;">
                    <div class="content-header">
                        <h2 class="content-title">
                            <i class="fas fa-clipboard-list"></i>
                            Sistem Logları
                        </h2>
                    </div>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        Log modülü yakında eklenecek...
                    </div>
                </div>
            </section>
        </main>
    </div>

    <!-- User Modal -->
    <div class="modal fade" id="userModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="userModalTitle">Kullanıcı Ekle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="userForm">
                        <input type="hidden" id="userId" name="userId">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="username" class="form-label">Kullanıcı Adı</label>
                                <input type="text" class="form-control" id="username" name="username" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" name="email" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="password" class="form-label">Şifre</label>
                                <input type="password" class="form-control" id="password" name="password">
                                <small class="form-text text-muted" id="passwordHelpText">Güncelleme sırasında boş
                                    bırakabilirsiniz</small>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="role" class="form-label">Rol</label>
                                <select class="form-select" id="role" name="role" required>
                                    <option value="viewer">Viewer</option>
                                    <option value="user">User</option>
                                    <option value="admin">Admin</option>
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="is_active" name="is_active" checked>
                                <label class="form-check-label" for="is_active">
                                    Aktif
                                </label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="button" class="btn btn-primary" id="saveUserBtn">Kaydet</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Camera Modal -->
    <div class="modal fade" id="cameraModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cameraModalTitle">Kamera Ekle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="cameraForm">
                        <input type="hidden" id="cameraId" name="cameraId">
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="camera_name" class="form-label">Kamera Adı</label>
                                <input type="text" class="form-control" id="camera_name" name="name" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="camera_brand" class="form-label">Marka</label>
                                <select class="form-select" id="camera_brand" name="brand" required>
                                    <option value="">Marka Seçin</option>
                                    <option value="Dahua">Dahua</option>
                                    <option value="Hikvision">Hikvision</option>
                                    <option value="Samsung">Samsung</option>
                                    <option value="Axis">Axis</option>
                                    <option value="Bosch">Bosch</option>
                                    <option value="Other">Diğer</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="camera_model" class="form-label">Model</label>
                                <input type="text" class="form-control" id="camera_model" name="model" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="camera_description" class="form-label">Açıklama</label>
                            <textarea class="form-control" id="camera_description" name="description"
                                rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="camera_active" name="is_active"
                                    checked>
                                <label class="form-check-label" for="camera_active">
                                    Aktif
                                </label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="button" class="btn btn-primary" id="saveCameraBtn">Kaydet</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Stream Modal -->
    <div class="modal fade" id="streamModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="streamModalTitle">Yayın Ekle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="streamForm">
                        <input type="hidden" id="streamId" name="streamId">

                        <!-- Basic Information -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="text-primary border-bottom pb-2">Temel Bilgiler</h6>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="stream_name" class="form-label">Yayın Adı</label>
                                <input type="text" class="form-control" id="stream_name" name="stream_name" required
                                    pattern="[a-zA-Z0-9_-]+" title="Sadece harf, rakam, - ve _ karakterleri kullanın">
                                <small class="form-text text-muted">Sadece harf, rakam, - ve _ kullanın</small>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="stream_camera" class="form-label">Kamera</label>
                                <select class="form-select" id="stream_camera" name="camera_id" required>
                                    <option value="">Kamera Seçin</option>
                                </select>
                            </div>
                        </div>

                        <!-- Network Settings -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="text-primary border-bottom pb-2">Bağlantı Ayarları</h6>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="stream_ip" class="form-label">IP Adresi</label>
                                <input type="text" class="form-control" id="stream_ip" name="ip_address"
                                    placeholder="192.168.1.100" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="stream_port" class="form-label">RTSP Port</label>
                                <input type="number" class="form-control" id="stream_port" name="rtsp_port" value="554"
                                    min="1" max="65535" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="stream_channel" class="form-label">Kanal</label>
                                <input type="number" class="form-control" id="stream_channel" name="channel" value="1"
                                    min="1" max="16">
                            </div>
                        </div>

                        <!-- Authentication -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="text-primary border-bottom pb-2">Kimlik Doğrulama</h6>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="stream_username" class="form-label">Kullanıcı Adı</label>
                                <input type="text" class="form-control" id="stream_username" name="username" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="stream_password" class="form-label">Şifre</label>
                                <input type="password" class="form-control" id="stream_password" name="password"
                                    required>
                                <small class="form-text text-muted" id="streamPasswordHelpText">Güncelleme sırasında boş
                                    bırakabilirsiniz</small>
                            </div>
                        </div>

                        <!-- Stream Settings -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="text-primary border-bottom pb-2">Yayın Ayarları</h6>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label for="stream_resolution" class="form-label">Çözünürlük</label>
                                <select class="form-select" id="stream_resolution" name="resolution">
                                    <option value="640x480">640x480 (SD)</option>
                                    <option value="1280x720">1280x720 (HD)</option>
                                    <option value="1920x1080">1920x1080 (Full HD)</option>
                                </select>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label for="stream_fps" class="form-label">FPS</label>
                                <select class="form-select" id="stream_fps" name="fps">
                                    <option value="30">30 FPS</option>
                                    <option value="25">25 FPS</option>
                                    <option value="15">15 FPS</option>
                                    <option value="10">10 FPS</option>
                                </select>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label for="stream_bitrate" class="form-label">Video Bitrate</label>
                                <select class="form-select" id="stream_bitrate" name="bitrate">
                                    <option value="500k">500k</option>
                                    <option value="800k">800k</option>
                                    <option value="1200k">1200k</option>
                                    <option value="2000k">2000k</option>
                                </select>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label for="stream_audio_bitrate" class="form-label">Audio Bitrate</label>
                                <select class="form-select" id="stream_audio_bitrate" name="audio_bitrate">
                                    <option value="128k">128k</option>
                                    <option value="160k">160k</option>
                                    <option value="192k">192k</option>
                                </select>
                            </div>
                        </div>

                        <!-- Checkboxes -->
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="stream_active" name="is_active"
                                        checked>
                                    <label class="form-check-label" for="stream_active">
                                        Aktif
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="stream_recording"
                                        name="is_recording">
                                    <label class="form-check-label" for="stream_recording">
                                        Kayıt Aktif
                                    </label>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="button" class="btn btn-primary" id="saveStreamBtn">Kaydet</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Change Password Modal -->
    <div class="modal fade" id="changePasswordModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Şifre Değiştir</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="changePasswordForm">
                        <input type="hidden" id="changePasswordUserId" name="userId">
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">Yeni Şifre</label>
                            <input type="password" class="form-control" id="newPassword" name="newPassword" required>
                        </div>
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Şifre Tekrar</label>
                            <input type="password" class="form-control" id="confirmPassword" name="confirmPassword"
                                required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="button" class="btn btn-warning" id="savePasswordBtn">Şifre Değiştir</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables.net/1.13.6/jquery.dataTables.min.js"></script>
    <script
        src="https://cdnjs.cloudflare.com/ajax/libs/datatables.net-bs5/1.13.6/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.7.0/sweetalert2.all.min.js"></script>

    <script>
        class AdminPanel {
            constructor() {
                this.currentSection = 'users';
                this.usersTable = null;
                this.camerasTable = null;
                this.streamsTable = null;
                this.init();
            }

            init() {
                this.initEventListeners();
                this.initUsersTable();
            }

            initEventListeners() {
                // Sidebar menu items
                $('.menu-item').on('click', (e) => {
                    e.preventDefault();
                    const section = $(e.currentTarget).data('section');
                    this.switchSection(section);
                });

                // User buttons
                $('#addUserBtn').on('click', () => {
                    this.openUserModal();
                });

                $('#saveUserBtn').on('click', () => {
                    this.saveUser();
                });

                $('#savePasswordBtn').on('click', () => {
                    this.changePassword();
                });

                // Camera buttons
                $('#addCameraBtn').on('click', () => {
                    this.openCameraModal();
                });

                $('#saveCameraBtn').on('click', () => {
                    this.saveCamera();
                });

                // Stream buttons
                $('#addStreamBtn').on('click', () => {
                    this.openStreamModal();
                });

                $('#saveStreamBtn').on('click', () => {
                    this.saveStream();
                });

                // Form validation
                $('#confirmPassword').on('input', () => {
                    this.validatePasswordMatch();
                });
            }

            switchSection(section) {
                // Update active menu item
                $('.menu-item').removeClass('active');
                $(`.menu-item[data-section="${section}"]`).addClass('active');

                // Hide all sections
                $('.content-section').hide();

                // Show selected section
                $(`#${section}-section`).show();

                this.currentSection = section;

                // Load section data if needed
                if (section === 'users' && !this.usersTable) {
                    this.initUsersTable();
                } else if (section === 'cameras' && !this.camerasTable) {
                    this.initCamerasTable();
                } else if (section === 'streams' && !this.streamsTable) {
                    this.initStreamsTable();
                }
            }

            initUsersTable() {
                if (this.usersTable) {
                    this.usersTable.destroy();
                }

                this.usersTable = $('#usersTable').DataTable({
                    processing: true,
                    serverSide: true,
                    ajax: {
                        url: '/admin/api/users',
                        type: 'POST'
                    },
                    columns: [
                        { data: 'id', width: '50px' },
                        {
                            data: 'username',
                            render: function (data) {
                                return `<strong>${data}</strong>`;
                            }
                        },
                        { data: 'email' },
                        {
                            data: 'role',
                            render: function (data) {
                                const roleClass = `role-${data}`;
                                return `<span class="role-badge ${roleClass}">${data.toUpperCase()}</span>`;
                            }
                        },
                        {
                            data: 'is_active',
                            render: function (data) {
                                const statusClass = data ? 'status-active' : 'status-inactive';
                                const statusText = data ? 'Aktif' : 'Pasif';
                                return `<span class="status-badge ${statusClass}">${statusText}</span>`;
                            }
                        },
                        {
                            data: 'last_login',
                            render: function (data) {
                                if (!data) return '<small class="text-muted">Hiç giriş yapmamış</small>';
                                return new Date(data).toLocaleString('tr-TR');
                            }
                        },
                        {
                            data: 'created_at',
                            render: function (data) {
                                return new Date(data).toLocaleString('tr-TR');
                            }
                        },
                        {
                            data: null,
                            orderable: false,
                            searchable: false,
                            render: function (data, type, row) {
                                return `
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-outline-primary" onclick="adminPanel.editUser(${row.id})" title="Düzenle">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-warning" onclick="adminPanel.openChangePasswordModal(${row.id}, '${row.username}')" title="Şifre Değiştir">
                                            <i class="fas fa-key"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="adminPanel.deleteUser(${row.id}, '${row.username}')" title="Sil">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                `;
                            }
                        }
                    ],
                    order: [[0, 'desc']],
                    pageLength: 25,
                    responsive: true,
                    language: {
                        url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/tr.json'
                    }
                });
            }

            initCamerasTable() {
                if (this.camerasTable) {
                    this.camerasTable.destroy();
                }

                this.camerasTable = $('#camerasTable').DataTable({
                    processing: true,
                    serverSide: true,
                    ajax: {
                        url: '/admin/api/cameras',
                        type: 'POST'
                    },
                    columns: [
                        {
                            data: 'name',
                            render: function (data) {
                                return `<strong>${data}</strong>`;
                            }
                        },
                        { data: 'brand' },
                        { data: 'model' },
                        {
                            data: 'is_active',
                            render: function (data) {
                                const statusClass = data ? 'status-active' : 'status-inactive';
                                const statusText = data ? 'Aktif' : 'Pasif';
                                return `<span class="status-badge ${statusClass}">${statusText}</span>`;
                            }
                        },
                        {
                            data: 'streams',
                            render: function (data) {
                                return data ? data.length : 0;
                            }
                        },
                        {
                            data: 'created_at',
                            render: function (data) {
                                return new Date(data).toLocaleString('tr-TR');
                            }
                        },
                        {
                            data: null,
                            orderable: false,
                            searchable: false,
                            render: function (data, type, row) {
                                return `
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-outline-primary" onclick="adminPanel.editCamera('${row.id}')" title="Düzenle">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="adminPanel.deleteCamera('${row.id}', '${row.name}')" title="Sil">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                `;
                            }
                        }
                    ],
                    order: [[0, 'desc']],
                    pageLength: 25,
                    responsive: true,
                    language: {
                        url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/tr.json'
                    }
                });
            }

            initStreamsTable() {
                if (this.streamsTable) {
                    this.streamsTable.destroy();
                }

                this.streamsTable = $('#streamsTable').DataTable({
                    processing: true,
                    serverSide: true,
                    ajax: {
                        url: '/admin/api/streams',
                        type: 'POST'
                    },
                    columns: [
                        {
                            data: 'stream_name',
                            render: function (data) {
                                return `<strong>${data}</strong>`;
                            }
                        },
                        {
                            data: 'camera',
                            render: function (data) {
                                return data ? `${data.name} (${data.brand})` : 'N/A';
                            }
                        },
                        { data: 'ip_address' },
                        {
                            data: 'status',
                            render: function (data) {
                                let statusClass = '';
                                let statusText = '';
                                switch (data) {
                                    case 'streaming':
                                        statusClass = 'status-streaming';
                                        statusText = 'Yayın Yapıyor';
                                        break;
                                    case 'stopped':
                                        statusClass = 'status-stopped';
                                        statusText = 'Durduruldu';
                                        break;
                                    case 'starting':
                                        statusClass = 'status-starting';
                                        statusText = 'Başlatılıyor';
                                        break;
                                    case 'error':
                                        statusClass = 'status-error';
                                        statusText = 'Hata';
                                        break;
                                    default:
                                        statusClass = 'status-stopped';
                                        statusText = 'Bilinmiyor';
                                }
                                return `<span class="status-badge ${statusClass}">${statusText}</span>`;
                            }
                        },
                        { data: 'resolution' },
                        { data: 'fps' },
                        {
                            data: 'last_started',
                            render: function (data) {
                                if (!data) return '<small class="text-muted">Hiç</small>';
                                return new Date(data).toLocaleString('tr-TR');
                            }
                        },
                        {
                            data: null,
                            orderable: false,
                            searchable: false,
                            render: function (data, type, row) {
                                const isStreaming = row.status === 'streaming' || row.status === 'starting';
                                const startBtn = isStreaming ?
                                    `<button class="btn btn-sm btn-outline-danger" onclick="adminPanel.stopStream('${row.id}')" title="Durdur">
                                        <i class="fas fa-stop"></i>
                                    </button>` :
                                    `<button class="btn btn-sm btn-outline-success" onclick="adminPanel.startStream('${row.id}')" title="Başlat">
                                        <i class="fas fa-play"></i>
                                    </button>`;

                                return `
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-outline-primary" onclick="adminPanel.editStream('${row.id}')" title="Düzenle">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        ${startBtn}
                                        <button class="btn btn-sm btn-outline-danger" onclick="adminPanel.deleteStream('${row.id}', '${row.stream_name}')" title="Sil">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                `;
                            }
                        }
                    ],
                    order: [[0, 'desc']],
                    pageLength: 25,
                    responsive: true,
                    language: {
                        url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/tr.json'
                    }
                });
            }

            // User Methods (keeping existing user methods)
            openUserModal(userId = null) {
                $('#userForm')[0].reset();
                $('#userId').val(userId || '');

                if (userId) {
                    $('#userModalTitle').text('Kullanıcı Düzenle');
                    $('#passwordHelpText').show();
                    $('#password').removeAttr('required');
                    this.loadUserData(userId);
                } else {
                    $('#userModalTitle').text('Yeni Kullanıcı Ekle');
                    $('#passwordHelpText').hide();
                    $('#password').attr('required', true);
                }

                new bootstrap.Modal('#userModal').show();
            }

            async loadUserData(userId) {
                try {
                    const response = await fetch(`/admin/api/users/${userId}`);
                    const result = await response.json();

                    if (result.success) {
                        const user = result.data;
                        $('#username').val(user.username);
                        $('#email').val(user.email);
                        $('#role').val(user.role);
                        $('#is_active').prop('checked', user.is_active);
                    }
                } catch (error) {
                    console.error('Error loading user data:', error);
                }
            }

            async saveUser() {
                const formData = new FormData($('#userForm')[0]);
                const userId = $('#userId').val();
                const isEdit = !!userId;

                const url = isEdit ? `/admin/api/users/${userId}` : '/admin/api/users/create';
                const method = isEdit ? 'PUT' : 'POST';

                try {
                    const response = await fetch(url, {
                        method: method,
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        Swal.fire({
                            title: 'Başarılı!',
                            text: result.message,
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        });

                        bootstrap.Modal.getInstance('#userModal').hide();
                        this.usersTable.ajax.reload();
                    } else {
                        Swal.fire({
                            title: 'Hata!',
                            text: result.message,
                            icon: 'error'
                        });
                    }
                } catch (error) {
                    console.error('Error saving user:', error);
                    Swal.fire({
                        title: 'Hata!',
                        text: 'Kullanıcı kaydedilirken bir hata oluştu.',
                        icon: 'error'
                    });
                }
            }

            editUser(userId) {
                this.openUserModal(userId);
            }

            openChangePasswordModal(userId, username) {
                $('#changePasswordForm')[0].reset();
                $('#changePasswordUserId').val(userId);
                $('#changePasswordModal .modal-title').text(`${username} - Şifre Değiştir`);

                new bootstrap.Modal('#changePasswordModal').show();
            }

            async changePassword() {
                const newPassword = $('#newPassword').val();
                const confirmPassword = $('#confirmPassword').val();
                const userId = $('#changePasswordUserId').val();

                if (newPassword !== confirmPassword) {
                    Swal.fire({
                        title: 'Hata!',
                        text: 'Şifreler eşleşmiyor!',
                        icon: 'error'
                    });
                    return;
                }

                if (newPassword.length < 6) {
                    Swal.fire({
                        title: 'Hata!',
                        text: 'Şifre en az 6 karakter olmalıdır!',
                        icon: 'error'
                    });
                    return;
                }

                try {
                    const response = await fetch(`/admin/api/users/${userId}/change-password`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ password: newPassword })
                    });

                    const result = await response.json();

                    if (result.success) {
                        Swal.fire({
                            title: 'Başarılı!',
                            text: 'Şifre başarıyla değiştirildi.',
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        });

                        bootstrap.Modal.getInstance('#changePasswordModal').hide();
                    } else {
                        Swal.fire({
                            title: 'Hata!',
                            text: result.message,
                            icon: 'error'
                        });
                    }
                } catch (error) {
                    console.error('Error changing password:', error);
                    Swal.fire({
                        title: 'Hata!',
                        text: 'Şifre değiştirilirken bir hata oluştu.',
                        icon: 'error'
                    });
                }
            }

            async deleteUser(userId, username) {
                const result = await Swal.fire({
                    title: 'Emin misiniz?',
                    text: `${username} kullanıcısını silmek istediğinizden emin misiniz?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Evet, Sil!',
                    cancelButtonText: 'İptal'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/api/users/${userId}`, {
                            method: 'DELETE'
                        });

                        const deleteResult = await response.json();

                        if (deleteResult.success) {
                            Swal.fire({
                                title: 'Silindi!',
                                text: 'Kullanıcı başarıyla silindi.',
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            });

                            this.usersTable.ajax.reload();
                        } else {
                            Swal.fire({
                                title: 'Hata!',
                                text: deleteResult.message,
                                icon: 'error'
                            });
                        }
                    } catch (error) {
                        console.error('Error deleting user:', error);
                        Swal.fire({
                            title: 'Hata!',
                            text: 'Kullanıcı silinirken bir hata oluştu.',
                            icon: 'error'
                        });
                    }
                }
            }

            // Camera Methods
            openCameraModal(cameraId = null) {
                $('#cameraForm')[0].reset();
                $('#cameraId').val(cameraId || '');

                if (cameraId) {
                    $('#cameraModalTitle').text('Kamera Düzenle');
                    this.loadCameraData(cameraId);
                } else {
                    $('#cameraModalTitle').text('Yeni Kamera Ekle');
                }

                new bootstrap.Modal('#cameraModal').show();
            }

            async loadCameraData(cameraId) {
                try {
                    const response = await fetch(`/admin/api/cameras/${cameraId}`);
                    const result = await response.json();

                    if (result.success) {
                        const camera = result.data;
                        $('#camera_name').val(camera.name);
                        $('#camera_brand').val(camera.brand);
                        $('#camera_model').val(camera.model);
                        $('#camera_description').val(camera.description);
                        $('#camera_active').prop('checked', camera.is_active);
                    }
                } catch (error) {
                    console.error('Error loading camera data:', error);
                }
            }

            async saveCamera() {
                const formData = new FormData($('#cameraForm')[0]);
                const cameraId = $('#cameraId').val();
                const isEdit = !!cameraId;

                const url = isEdit ? `/admin/api/cameras/${cameraId}` : '/admin/api/cameras/create';
                const method = isEdit ? 'PUT' : 'POST';

                try {
                    const response = await fetch(url, {
                        method: method,
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        Swal.fire({
                            title: 'Başarılı!',
                            text: result.message,
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        });

                        bootstrap.Modal.getInstance('#cameraModal').hide();
                        if (this.camerasTable) {
                            this.camerasTable.ajax.reload();
                        }
                    } else {
                        Swal.fire({
                            title: 'Hata!',
                            text: result.message,
                            icon: 'error'
                        });
                    }
                } catch (error) {
                    console.error('Error saving camera:', error);
                    Swal.fire({
                        title: 'Hata!',
                        text: 'Kamera kaydedilirken bir hata oluştu.',
                        icon: 'error'
                    });
                }
            }

            editCamera(cameraId) {
                this.openCameraModal(cameraId);
            }

            async deleteCamera(cameraId, cameraName) {
                const result = await Swal.fire({
                    title: 'Emin misiniz?',
                    text: `${cameraName} kamerasını silmek istediğinizden emin misiniz?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Evet, Sil!',
                    cancelButtonText: 'İptal'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/api/cameras/${cameraId}`, {
                            method: 'DELETE'
                        });

                        const deleteResult = await response.json();

                        if (deleteResult.success) {
                            Swal.fire({
                                title: 'Silindi!',
                                text: 'Kamera başarıyla silindi.',
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            });

                            this.camerasTable.ajax.reload();
                        } else {
                            Swal.fire({
                                title: 'Hata!',
                                text: deleteResult.message,
                                icon: 'error'
                            });
                        }
                    } catch (error) {
                        console.error('Error deleting camera:', error);
                        Swal.fire({
                            title: 'Hata!',
                            text: 'Kamera silinirken bir hata oluştu.',
                            icon: 'error'
                        });
                    }
                }
            }

            // Stream Methods
            async openStreamModal(streamId = null) {
                $('#streamForm')[0].reset();
                $('#streamId').val(streamId || '');

                // Load camera list
                await this.loadCameraList();

                if (streamId) {
                    $('#streamModalTitle').text('Yayın Düzenle');
                    $('#streamPasswordHelpText').show();
                    $('#stream_password').removeAttr('required');
                    await this.loadStreamData(streamId);
                } else {
                    $('#streamModalTitle').text('Yeni Yayın Ekle');
                    $('#streamPasswordHelpText').hide();
                    $('#stream_password').attr('required', true);
                }

                new bootstrap.Modal('#streamModal').show();
            }

            async loadCameraList() {
                try {
                    const response = await fetch('/admin/api/cameras/list');
                    const result = await response.json();

                    if (result.success) {
                        const cameraSelect = $('#stream_camera');
                        cameraSelect.empty().append('<option value="">Kamera Seçin</option>');

                        result.data.forEach(camera => {
                            cameraSelect.append(`<option value="${camera.id}">${camera.name} - ${camera.brand} ${camera.model}</option>`);
                        });
                    }
                } catch (error) {
                    console.error('Error loading camera list:', error);
                }
            }

            async loadStreamData(streamId) {
                try {
                    const response = await fetch(`/admin/api/streams/${streamId}`);
                    const result = await response.json();

                    if (result.success) {
                        const stream = result.data;
                        $('#stream_name').val(stream.stream_name);
                        $('#stream_camera').val(stream.camera_id);
                        $('#stream_ip').val(stream.ip_address);
                        $('#stream_port').val(stream.rtsp_port);
                        $('#stream_channel').val(stream.channel);
                        $('#stream_username').val(stream.username);
                        $('#stream_resolution').val(stream.resolution);
                        $('#stream_fps').val(stream.fps);
                        $('#stream_bitrate').val(stream.bitrate);
                        $('#stream_audio_bitrate').val(stream.audio_bitrate);
                        $('#stream_active').prop('checked', stream.is_active);
                        $('#stream_recording').prop('checked', stream.is_recording);
                    }
                } catch (error) {
                    console.error('Error loading stream data:', error);
                }
            }

            async saveStream() {
                const formData = new FormData($('#streamForm')[0]);
                const streamId = $('#streamId').val();
                const isEdit = !!streamId;

                const url = isEdit ? `/admin/api/streams/${streamId}` : '/admin/api/streams/create';
                const method = isEdit ? 'PUT' : 'POST';

                try {
                    const response = await fetch(url, {
                        method: method,
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        Swal.fire({
                            title: 'Başarılı!',
                            text: result.message,
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        });

                        bootstrap.Modal.getInstance('#streamModal').hide();
                        if (this.streamsTable) {
                            this.streamsTable.ajax.reload();
                        }
                    } else {
                        Swal.fire({
                            title: 'Hata!',
                            text: result.message,
                            icon: 'error'
                        });
                    }
                } catch (error) {
                    console.error('Error saving stream:', error);
                    Swal.fire({
                        title: 'Hata!',
                        text: 'Yayın kaydedilirken bir hata oluştu.',
                        icon: 'error'
                    });
                }
            }

            editStream(streamId) {
                this.openStreamModal(streamId);
            }

            async startStream(streamId) {
                try {
                    Swal.fire({
                        title: 'Yayın Başlatılıyor...',
                        text: 'Lütfen bekleyin',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    const response = await fetch(`/admin/api/streams/${streamId}/start`, {
                        method: 'POST'
                    });

                    const result = await response.json();

                    if (result.success) {
                        Swal.fire({
                            title: 'Başarılı!',
                            text: result.message,
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        });

                        this.streamsTable.ajax.reload();
                    } else {
                        Swal.fire({
                            title: 'Hata!',
                            text: result.message,
                            icon: 'error'
                        });
                    }
                } catch (error) {
                    console.error('Error starting stream:', error);
                    Swal.fire({
                        title: 'Hata!',
                        text: 'Yayın başlatılırken bir hata oluştu.',
                        icon: 'error'
                    });
                }
            }

            async stopStream(streamId) {
                try {
                    const response = await fetch(`/admin/api/streams/${streamId}/stop`, {
                        method: 'POST'
                    });

                    const result = await response.json();

                    if (result.success) {
                        Swal.fire({
                            title: 'Başarılı!',
                            text: result.message,
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        });

                        this.streamsTable.ajax.reload();
                    } else {
                        Swal.fire({
                            title: 'Hata!',
                            text: result.message,
                            icon: 'error'
                        });
                    }
                } catch (error) {
                    console.error('Error stopping stream:', error);
                    Swal.fire({
                        title: 'Hata!',
                        text: 'Yayın durdurulurken bir hata oluştu.',
                        icon: 'error'
                    });
                }
            }

            async deleteStream(streamId, streamName) {
                const result = await Swal.fire({
                    title: 'Emin misiniz?',
                    text: `${streamName} yayınını silmek istediğinizden emin misiniz?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Evet, Sil!',
                    cancelButtonText: 'İptal'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/api/streams/${streamId}`, {
                            method: 'DELETE'
                        });

                        const deleteResult = await response.json();

                        if (deleteResult.success) {
                            Swal.fire({
                                title: 'Silindi!',
                                text: 'Yayın başarıyla silindi.',
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            });

                            this.streamsTable.ajax.reload();
                        } else {
                            Swal.fire({
                                title: 'Hata!',
                                text: deleteResult.message,
                                icon: 'error'
                            });
                        }
                    } catch (error) {
                        console.error('Error deleting stream:', error);
                        Swal.fire({
                            title: 'Hata!',
                            text: 'Yayın silinirken bir hata oluştu.',
                            icon: 'error'
                        });
                    }
                }
            }

            validatePasswordMatch() {
                const newPassword = $('#newPassword').val();
                const confirmPassword = $('#confirmPassword').val();

                if (confirmPassword && newPassword !== confirmPassword) {
                    $('#confirmPassword')[0].setCustomValidity('Şifreler eşleşmiyor');
                } else {
                    $('#confirmPassword')[0].setCustomValidity('');
                }
            }
        }

        // Initialize admin panel when document is ready
        $(document).ready(function () {
            window.adminPanel = new AdminPanel();
        });

        // Handle page visibility changes to refresh data
        document.addEventListener('visibilitychange', function () {
            if (!document.hidden && window.adminPanel) {
                if (window.adminPanel.usersTable && window.adminPanel.currentSection === 'users') {
                    window.adminPanel.usersTable.ajax.reload(null, false);
                }
                if (window.adminPanel.camerasTable && window.adminPanel.currentSection === 'cameras') {
                    window.adminPanel.camerasTable.ajax.reload(null, false);
                }
                if (window.adminPanel.streamsTable && window.adminPanel.currentSection === 'streams') {
                    window.adminPanel.streamsTable.ajax.reload(null, false);
                }
            }
        });
    </script>
</body>

</html>